Learn Bash Scripting by Building Five Programs
Review
The first thing you need to do is start the terminal. Do that by clicking the "hamburger" menu at the top left of the screen, going to the "terminal" section, and clicking "new terminal". Once you open a new one, type echo hello bash into the terminal and press enter.

You can run commands in the terminal or put them in a file to be run as a script. You will be making five small programs to learn some scripting. The first one will be a "questionnaire". Use the touch command to create questionnaire.sh in the project folder.

To start, open the file in the main editor by clicking the filename in the left side panel.
Then, add the text echo hello questionnaire at the top of the file.

Your script has one command. Run it with sh questionnaire.sh to see what happens. sh stands for shell.

Using sh to run your script uses the shell interpreter. Run your script again with bash questionnaire.sh to use the bash interpreter. bash stands for bourne-again shell.

The output was the same. There are many interpreters which may not give the output you expect. Find out where the bash interpreter is located by entering which bash in the terminal.

That's the absolute path to the bash interpreter. You can tell your program to use it by placing a shebang at the very top of the file like this: #!<path_to_interpreter>. Add a shebang at the very top of your file, the one you want looks like this: #!/bin/bash.

Now, instead of using sh or bash to run your script. You can run it by executing the file and it will default to bash. Run your script by executing it with ./questionnaire.sh

You should have got a permission denied message because you don't have permissions to execute the script. List what's in the project folder in long list format with ls -l to see the file permissions.

Next to your file is -rw-r--r--. All but the first character (-) describe permissions different users have with the file. r means read, w means write, x means execute. I don't see an x anywhere, so nobody can execute it. Enter chmod +x questionnaire.sh in the terminal to give everyone executable permissions.

List what's in the folder again with ls -l to see the new permissions.

The x was added by each type of user to denote that anyone can execute the file. Run your file again by executing it with ./questionnaire.sh.

Now it works. In your script, you can add any commands that you would be able to enter in the terminal. Test this by adding the ls -l command below your other command.

Run the script by executing it again.

Your script printed the result of the two commands as if you entered them in the terminal. Delete everything but the shebang from your file so you can start making the questionnaire.

Bash has variables, functions, and other things you might be familiar with. You can create a variable with VARIABLE_NAME=VALUE. There cannot be any spaces around the equal (=) sign. If a variable has any spaces in it, place double quotes around it. Create a variable named QUESTION1 and set it's value to "What's your name?".

To use a variable, place $ in front of it like this: $VARIABLE_NAME. Shell scripts run from top to bottom, so you can only use variable below where it's created. Use echo to print your variable.

Run the file like you did before to see if it worked.

The question was printed. Next, you want to be able to accept input from a user. You can do that with read like this: read VARIABLE_NAME. This will get user input and store it into a new variable. After you print the question, use read to get input and store it in a variable named NAME.

At the bottom of your script, use echo to print Hello <name>. to the terminal.

Run the file again. Type your name and press enter after it asks for it.

Right below your first variable, create another one named QUESTION2. Set the value to, Where are you from?. Make sure to put it in double quotes.

After your read command, use your new variable to print the next question.

Below where the second question is printed, use read to get input from the user into a variable named LOCATION.

Change the existing response to Hello <name> from <location>..

Run the script and enter values when it is waiting for input.

It's looking good. I want a title to appear when the program first starts. Use echo to print ~~ Questionnaire ~~ before anything else is printed.

Run the script and enter values until it is done again so you can see what the title looks like.

It would be nice if there was some empty lines around the title. You've probably used the --help flag before, see if you can use it with echo to try and find a way to add empty lines.

That didn't work as I hoped. Another way to find information about a command is with man. It stands for manual and you can use it like this: man <command>. See if there's a manual for echo.

At the top of the menu, the -e option looks promising. And the \n below it says new line. You should take a look at those. In your script, change the title to echo -e \n~~ Questionnaire ~~\n to see if that prints the empty lines.

Run it to see if it worked. You can press ctrl+c to close the program after it starts if you don't want to enter values.

It didn't print the empty lines. echo will only print empty lines if the value is enclosed in quotes. Place double quotes around the title that gets printed to see if it works.

Run your script again to see if that fixed it.

Now it's working ðŸ˜„ Create a QUESTION3 variable next to the other two, set it's value to "What's your favorite coding website?"

Use echo to print the third question after you read the LOCATION.

After the question you just printed, add code to read input into a variable named WEBSITE.

Change the echo command of the response to print this sentence instead: Hello <name> from <location>. I learned that your favorite coding website is <website>!.

Run the script and enter values when the program is waiting. Let's see the final output.

One last thing. Change that final response to print an empty line at the beginning of the sentence.

Run it one last time and enter values when it asks to see if you like how it looks.

It looks good. I think you are done with that script for now. The next program will be countdown timer. Use the touch command to create a new file named countdown.sh in your project folder.

Give your file executable permissions so you can run it like the other one. It's the chmod command with the +x flag.

You want to use the bash interpreter again. Add a shebang at the top of your new file to denote that.

Comments in bash look like this: # <comment>. Add a comment below the shebang that says Program that counts down to zero from a given argument so people know what it does. Note that the shebang is a special case and is not treated like a comment.

Programs can take arguments. You can access them a few different ways with $. Add echo $* in your script to print all arguments passed to it.

Execute your script with ./countdown.sh.

Nothing was printed. Run your script again, but this time add three arguments to the command; arg1, arg2, and arg3. Place them after the command with a space before each one.

$* printed all the arguments passed to your script. To access any one of them, use $<number>. arg2 could have been accessed with $2. Change your script to echo the first argument instead of all the arguments.

Run your file with ./countdown.sh arg1 arg2 arg3 again.

Now it just prints the first argument. Your program will accept an argument to count down from. You will test it with an if statement to make sure it's a positive integer. I wonder what that syntax would look like. Type help in the terminal to see if you can find anything.

This is a list of built-in commands. You should look over it, some of them may look familiar. I see echo in there. Another one is if. See if you can find out more about it by checking its man page.

I guess there isn't a man page for it. At the top of the help screen, I noticed you can use help <command> to find out more. Yet another way to find out about a command ðŸ˜¥ See if you can find out more about if with that method.

The syntax is at the top, not all of it is required. Here's another example:

if [[ CONDITION ]]
then
  STATEMENTS
fi
Remove the echo $1 in your script and add an if condition that checks if [[ $1 == arg1 ]]. In its then area, use echo to print true to the screen. There must be spaces on the inside of the brackets ([[ ... ]]) and around the operator (==).

Notice that the end of the syntax is fi (if backwards). It should print true if you pass arg1 to your script now. Run the script with arg1 as the only argument.

The if condition worked, it printed true. Run it again with anything except arg1 as the first argument.

Nothing was printed. One of the optional parts of if was an else area. You can use it like this:

if [[ CONDITION ]]
then
  STATEMENTS
else
  STATEMENTS
fi
Add an else to your existing if condition. Use echo to print false if the condition fails.

Run the script again and use anything except arg1 as the only argument.

Now it printed false. Your program is expecting an integer to count down from as its argument. You can compare integers inside the brackets ([[ ... ]]) of your if with -eq (equal), -ne (not equal), -lt (less than), -le (less than or equal), -gt (greater than), -ge (greater than or equal). Change your if condition to check if your first argument is less than 5.

Run the script again and use 4 as a first argument to make sure it's working.

It printed true since your argument was less than 5. Run it again with 5 as the argument.

As expected, that printed false. Take a look at that help menu again. I want to see if we can find out more about how these expressions work.

Near the top left, it says [[ expression ]]. Those look like the double brackets you are using. See if you can get more info about that with the help command like you did with help if.

It might not be a bad idea to read that. Looks like you can use some, probably familiar, things like !, &&, and || to compare multiple expressions. There's also == and != operators for an individual expression. It says something about the test built-in command. See if you can bring up the help menu for that.

That's what I was looking for. At the top are some file operators. There's some string and other operators as well. You should take a look at them. Near the bottom, are the arithmetic operators you used with your if condition. Change the condition in your script to check if the first argument is less than or equal to 5.

Run the script and use 5 as a first argument again.

Now it prints true. Remember I said any command can run in the terminal or a script. Try running an expression right in the terminal by entering [[ 4 -le 5 ]] in it.

Nothing happened? Each command has an exit status that can be accessed with $?. View the exit status of the last command with echo $?.

The exit status of 0 means it was true, 4 is indeed less or equal to 5. Try it again with [[ 4 -ge 5 ]].

Use echo to view the exit status of the command you just entered.

It printed 1 this time for false. You can separate commands on a single line with ;. Enter your last two commands on one line like this: [[ 4 -ge 5 ]]; echo $?. It will run the expression, then print the exit status of it since it was the last command.

It's still false. Using the same syntax of [[ ... ]]; echo$?, check if 10 is not equal to 5 and print the exit status of the expression on one line.

You can think of an exit status of 0 as true. But it means that the command had zero errors. All commands have an exit status. Using the same syntax, enter bad_command; and check its exit status on a single line.

command not found, with an exit status of 127. Anything but 0 means there was an error with the command. bad_command didn't exist. Try it again with ls.

The command executed as expected and there were zero errors. So it gave you an exit status of 0. Try it again with ls -y.

The -y flag doesn't work with ls so it gave you an exit status other than 0, meaning that the command was unsuccessful. View the help menu of the test command again, I want to see what else is in that list.

You tried a few of the arithmetic operators, those work for integers. Try one of the file operators. The first one on the list checks if a file exists. Type [[ -a countdown.sh ]]; echo $? in the terminal to see if your file exists.

The file must exist. It's checking the folder the command is entered from. Try it again with bad_file.txt.

bad_file.txt doesn't exist. I think you're getting the hang of this. Using the same syntax, check if you have permissions to execute your countdown.sh file. You may want to look at that menu again.

You played around with a number of the expressions. View the help [[ expression ]] menu again that you looked at before to see a few more options. You can view the menu with just help [[.

As I mentioned before, you can test multiple expressions with && and ||. Enter [[ -x countdown.sh && 5 -le 4 ]]; echo $? in the terminal to test the file is executable by you and five is less than or equal to four.

Both conditions weren't true, so the exit status was 1 for false. Try testing the same two conditions with the or operator.

One of the conditions was true so it printed 0. I think that's enough of a detour. Back in your script, change the if condition to check if the first argument is greater than zero so you can be sure it's something you can count down from.

The condition you added checks if a positive integer was passed as an argument to the script and executes the then area. Change the existing echo command to print Include a positive integer as the first argument. if a positive integer is not used.

Run your script and use 1 as a first argument to make sure the condition is working.

Run it again and use anything but a positive integer as the only argument.

Looks like your if condition is working. Next, you want to loop over the argument and count down to zero from it. Check the help menu to see if there's any commands for this.

There's two for loops in there, you want the second one. Here's an example:

for (( i = 10; i > 0; i-- ))
do
  echo $i
done
The above creates a variable (i = 10), then prints it, subtracts one, and repeats until i is not greater than 0. So it prints 10 through 1. In the then area of your condition, replace the echo with a for loop that prints from the argument ($1) to 1.

Run your script and use 10 as the first argument.

It works ðŸ˜„ But I want it to pause for one second between each number. Check the help menu again to see if there's any commands that might help.

I'm not seeing the command I was hoping to. These are the built-in commands, where are the rest? Type ls / to look around.

The / listed what's in the root of the file system. I see a bin folder, bin stands for binary. View what's in it with ls /bin.

These are some non built-in commands. There's quite a few that should look familiar. One is bash, that's the one you used for the shebang in your scripts. I see one called sleep. View the manual of it.

At the top, it says you can pause execution for a number of seconds. Try it out by entering sleep 3 in the terminal.

That should work. In your for loop, use sleep to make the script pause for 1 second after each number is printed.

Run your script and use 3 as the first argument.

Awesome. Except it should print 0 instead of stopping at 1. Change the condition in your for loop so that it checks for i >= 0.

Run your script with 3 as the argument again.

Excellent. I want it to display a title like the other script. Make it so that it prints ~~ Countdown Timer ~~ before anything else. Include a new line before and after it like you did for the other title.

Run your script and use 1 as the first argument again to see the title.

This is fun. You can create a multiline comment like this:

: '
  comment here
  more comment here
'
Comment out your for loop with a multiline comment. I want to try and do this with a while loop.

View the help menu for the while command to see if you can find anything.

It shows the syntax. First, below your comment, create a variable named I that is set to the value of your first argument. It will start there, then on each iteration of the while loop you can subtract 1 from it until it reaches 0.

The menu showed that you can make a while loop like this:

while [[ CONDITION ]]
do
  STATEMENTS
done
Add a while loop below the I variable you made. The condition should be $I -ge 0 and you should echo the I variable in the do statements.

I never changes here, so you would have an infinite loop. You can subtract one from I with double parenthesis (((...))) and the -- operator. In your while loop, add (( I-- )) after you echo $I to subtract one from I on each pass.

The last thing to do is to add the sleep again. In your while loop, add the code to make it sleep for 1 second. Add the code after the (( I-- )).

Run the script and use 5 as the first argument.

I think the countdown timer is finished. Feel free to try it with some other arguments. The next one is a bingo number generator. Use touch to create bingo.sh in the same folder as the others.

Give your file executable permissions like you did for the other two.

Add a shebang at the top of your new script. It should use bash again like other two.

Add a comment below the shebang that says, Bingo Number Generator.

Before I forget, use a single echo command to print a title for this program. It should say ~~ Bingo Number Generator ~~ with an empty line before and after it.

In your script, create a NUMBER variable that equals 5.

Below your new variable, use echo to print it to the screen.

Run the script by executing it.

The numbers in bingo go up to 75, each number has a letter from the word bingo associated with it. You will need to randomly generate a number between 1 and 75. Bash may have something that can help you here. A shell comes with environment variables. View them by entering printenv in the terminal.

These are all environment variables, they are predefined and loaded with each shell. Most of them arenâ€™t very relevant, but itâ€™s nice to know theyâ€™re there. One of them is LANG. Use echo to print it in the terminal.

View all variables in the shell with declare -p. -p stands for print

This list includes all the environment variables, and any others that may have been created in the current shell. There's one named RANDOM. Use echo to print it in the terminal.

Back in your script, use the RANDOM variable to set NUMBER to a random number instead of 5.

Run the script a few times in a row to make sure it's working.

The RANDOM variable will generate a random number between 0 and 32767. You can use the modulus operator to make it in the range you want. In your script, change the NUMBER variable to $RANDOM%75.

Run the script again.

Bash sees everything as a string so it just printed the %75 part literally. In the terminal, create an I variable equal to 0 (zero), so you can play with it and figure out how to do some calculations.

In the terminal, use echo to print your new variable.

I noticed that you used double parenthesis in the while loop of your countdown timer to subtract one from I. Type (( I++ )) in the terminal to see if anything happens.

There was no output. Use echo to print I in the terminal again.

The double parenthesis performed the calculation, changing the value of I from 0 to 1. Enter help let in the terminal to see the operators you can use with the double parenthesis.

You used several of these now, including in the for loop from the countdown timer. Enter (( I += 10 )) in the terminal to increment I by 10. Note that you don't need to prepend variables with $ inside these parenthesis.

Use echo to print your I variable again.

It should have printed 11 for the value of I. Using the double parenthesis like you have been is good for changing variable values or making comparisons. It makes the calculation in place and provides no output. If you want to make a calculation and do something with the result, add a $ in front like this: $(( ... )). Type $(( I + 4 )) in the terminal to see what happens.

It should say, bash: 15: command not found. It replaced the command with the result of the calculation. Effectively, trying to run 15 as a command. Enter the same command, but put echo in front of it. The command was $(( I + 4 ))

Again, it replaced the calculation with the result. So it was basically the same as if you entered echo 15. Use echo to print I to the screen again.

It should still have printed 11 for I. See the hints if it didn't. These double parenthesis with a $ are how you can assign a variable to some calculation. In the terminal, create a J variable, and use the $(( ... )) syntax to set its value to I - 6.

Use echo to print J.

J should equal 5. For some more practice, use echo to print the value J * 5 + 25.

It should have printed 50. Print J with echo again.

So, as a reminder, (( ... )) will perform a calculation or operation and output nothing. $(( ... )) will replace the calculation with the result of it. You made a few variables in this shell, view them with declare -p.

declare can be used to create variables, but you are just going to use it to view them for now. If you scroll up a little, you should find your I and J variables in there. View J with declare -p J.

I saw RANDOM in that list, too. View it with declare -p <variable> like you did for J.

Okay, I think I finally know how to get the random number for the Bingo Number Generator. Use echo and RANDOM % 75 to print a random number in the terminal.

One tiny problem, that calculation will give a number between 0 and 74. Enter the same command in the terminal, but add 1 to the calculation to get a random number between 1 and 75.

Back in your bingo.sh script, change the NUMBER variable so that it starts as a random number between 1 and 75 using the syntax you have been practicing.

Run your script a few times in a row to make sure it's working.

Next, create a TEXT variable and set the value to "The next number is, ". When the script is finished, the output will be something like The next number is B:15.

The letter that goes with the random number depends on what the number is. If it's 15 or less, it will be a B. I saw some comparisons in the help let menu, take a look at it again.

You used the double square brackets with your if statement in the last program, but you can use the double parenthesis with these operators as well. In your script, create an if statement that uses double parenthesis for the condition. Check if the number variable is less than or equal to 15. If it is, use your two variables to print The next number is, B:<number>.

if statements can have an "else if" area like this:

if (( CONDITION ))
then
  STATEMENTS
elif [[ CONDITION ]]
then
  STATEMENTS
fi
Using the double square brackets this time, add an elif condition that checks if the number variable is less than or equal to 30. If it is, use your two variables again to print The next number is, I:<number>

You can add as many elif sections to an if statement as you want. Add another elif, below the last, one that uses the double parenthesis to check if the number variable is less than 46. If it is, use your two variables to print The next number is, N:<number>

Run your script if you want to see the output. It should print one of the sentences if the random number is less than 46. It may take a couple tries. Add another elif, below the last one, that uses double square brackets to check if the number variable is less than 61. If it is, use your two variables to print The next number is, G:<number>

One more case to handle. Add an else at the bottom of the if that uses your two variables to print The next number is, O:<number>.

Run your script a few times and make sure it's working.

I think the generator is done ðŸ˜„ The next project is a fortune teller. Use the touch command to create fortune.sh in the same folder as the other scripts.

